SET SERVEROUTPUT ON;
DECLARE
    NUMERO1 NUMBER;
    NUMERO2 NUMBER;
    SUMA NUMBER;
BEGIN
    NUMERO1 := 2;
    NUMERO2 := 2;
    SUMA := NUMERO1 + NUMERO2;
    DBMS_OUTPUT.PUT_LINE('LA SUMA ES: '||SUMA);
END;


--DETERMINAR SI EL NÚMERO ES PAR O IMPAR
DECLARE
    NUMERO NUMBER;
BEGIN 
    NUMERO := 3;
    IF MOD(NUMERO,2) = 0 THEN
        DBMS_OUTPUT.PUT_LINE('EL NUMERO ES PAR');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EL NUMERO ES IMPAR');
    END IF;
END;

--CALCULADORA
DECLARE
    NUMERO1 NUMBER;
    NUMERO2 NUMBER;
    OPERADOR VARCHAR2(1);
BEGIN
    NUMERO1 := 1;
    NUMERO2 := 0;
    OPERADOR := '/';
    CASE
        WHEN OPERADOR = '+' THEN
            DBMS_OUTPUT.PUT_LINE(NUMERO1+NUMERO2);
        WHEN OPERADOR = '-' THEN
            DBMS_OUTPUT.PUT_LINE(NUMERO1-NUMERO2);
        WHEN OPERADOR = '*' THEN
            DBMS_OUTPUT.PUT_LINE(NUMERO1*NUMERO2);
        WHEN OPERADOR = '/' THEN
            DBMS_OUTPUT.PUT_LINE(NUMERO1/NUMERO2);
    END CASE;
    EXCEPTION
        WHEN ZERO_DIVIDE THEN
            DBMS_OUTPUT.PUT_LINE('EL NUMERO 2 NO PUEDE SER CERO');
END;

--DETERMINAR EDAD A PARTIR DE LA FECHA DE NACIMIENTO
DECLARE
    FECHA DATE;
    FECHA_ACTUAL DATE := SYSDATE;
    ANIO NUMBER;
    ANIO_ACTUAL NUMBER;
BEGIN
    FECHA := '07/03/1994'; --AQUI VA LA FECHA DE NACIMIENTO
    ANIO := EXTRACT(YEAR FROM FECHA);
    ANIO_ACTUAL := EXTRACT(YEAR FROM FECHA_ACTUAL);
    DBMS_OUTPUT.PUT_LINE('USTED TIENE: '||(ANIO_ACTUAL - ANIO)||' AÑOS');
END;

--TABLA DE MULTIPLICAR DE UN NÚMERO
DECLARE
    NUMERO NUMBER;
BEGIN
    NUMERO := 10;
    FOR i IN 1..10 LOOP
        DBMS_OUTPUT.PUT_LINE(NUMERO*I);
    END LOOP;
END;

DECLARE
    NUMERO NUMBER;
    CONTADOR NUMBER;
BEGIN
    NUMERO := 10;
    CONTADOR := 1;
    WHILE CONTADOR <> 11 LOOP
        DBMS_OUTPUT.PUT_LINE(NUMERO*CONTADOR);
        CONTADOR := CONTADOR + 1;
    END LOOP;
END;

--SUMA ENTRA DOS NÚMEROS
DECLARE
    NUMERO1 NUMBER;
    NUMERO2 NUMBER;
    SUMADOR NUMBER;
BEGIN
    NUMERO1 := 1;
    NUMERO2 := 7;
    SUMADOR := 0;
    IF NUMERO1 < NUMERO2 THEN
        FOR I IN (NUMERO1+1)..(NUMERO2-1) LOOP
            SUMADOR := SUMADOR + I;
        END LOOP;
    ELSE
        FOR I IN (NUMERO2+1)..(NUMERO1-1) LOOP
            SUMADOR := SUMADOR + I;
        END LOOP;
    END IF;
    DBMS_OUTPUT.PUT_LINE('LA SUMA ENTRE '||NUMERO1||' Y '||NUMERO2||' ES: '||SUMADOR);
END;

--OBTENER DIGITO VERIFICADOR RUT
DECLARE
    RUT VARCHAR2(8);
    RUT_INVERSO VARCHAR2(8);
    SUMA NUMBER;
    LARGO_RUT NUMBER;
    CONTADOR NUMBER;
    MULTIPLICADOR NUMBER;
    DIGITO NUMBER;
    RUT_INCORRECTO EXCEPTION;
BEGIN
    RUT := '8693113';
    IF LENGTH(RUT) = 7 OR LENGTH(RUT) = 8 THEN
        SUMA := 0;
        IF LENGTH(RUT) = 7 THEN
            RUT := CONCAT('0',RUT);
        END IF;
        LARGO_RUT := LENGTH(RUT);    
        SELECT REVERSE(RUT) INTO RUT_INVERSO FROM DUAL;
        DBMS_OUTPUT.PUT_LINE(RUT_INVERSO);
        CONTADOR := 1;
        MULTIPLICADOR := 2;
        WHILE CONTADOR <> LARGO_RUT+1 LOOP
            SUMA := SUMA + (SUBSTR(RUT_INVERSO,CONTADOR,1)*MULTIPLICADOR);
            CONTADOR := CONTADOR + 1;     
            MULTIPLICADOR := MULTIPLICADOR + 1;
            IF MULTIPLICADOR = 8 THEN
                MULTIPLICADOR := 2;
            END IF;
        END LOOP;
        DIGITO := 11 - MOD(SUMA,11);
        DBMS_OUTPUT.PUT_LINE('EL DIGITO VERIFICADOR ES: '||DIGITO);
    ELSE
        RAISE RUT_INCORRECTO;
    END IF;
    EXCEPTION
        WHEN RUT_INCORRECTO THEN
            DBMS_OUTPUT.PUT_LINE('EL RUT PROPORCIONADO NO ES CORRECTO');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('ERROR NO CONTROLADO');
END;

CREATE OR REPLACE PROCEDURE SUMA(
    NUMERO1 IN NUMBER,
    NUMERO2 IN NUMBER,
    RESULTADO OUT NUMBER
)
IS
    --DECLARACION VARIABLES
BEGIN
    RESULTADO := NUMERO1 + NUMERO2;
END;


DECLARE 
    RESULTADO NUMBER;
BEGIN
    SUMA(10,10,RESULTADO);
    DBMS_OUTPUT.PUT_LINE('EL RESULTADO ES: '||RESULTADO);
END;

CREATE TABLE PRODUCTO_AUX(
    CODIGO NUMBER NOT NULL,
    NOMBRE VARCHAR2(30),
    PRECIO NUMBER,
    STOCK NUMBER,
    PRIMARY KEY(CODIGO)
);

INSERT INTO PRODUCTO_AUX VALUES (1,'NOTEBOOK LENOVO',280000,1);
INSERT INTO PRODUCTO_AUX VALUES (2,'CELULAR IPHONE',560000,6);
INSERT INTO PRODUCTO_AUX VALUES (3,'CELULAR LG',450000,7);
INSERT INTO PRODUCTO_AUX VALUES (5,'MOUSE BLUETOOTH',28990,9);



CREATE OR REPLACE PROCEDURE COMPRAR(
    CODIGOP IN PRODUCTO_AUX.CODIGO%TYPE,
    CANTIDAD IN NUMBER
)
IS
    STOCK_ACTUAL NUMBER;
    STOCK_SOBREPASADO EXCEPTION;
BEGIN
    SELECT STOCK INTO STOCK_ACTUAL
    FROM PRODUCTO_AUX
    WHERE CODIGO = CODIGOP;
    LOCK TABLE PRODUCTO_AUX IN ROW EXCLUSIVE MODE;
    IF CANTIDAD <= STOCK_ACTUAL THEN        
        UPDATE PRODUCTO_AUX
        SET STOCK = (STOCK - CANTIDAD)
        WHERE CODIGO = CODIGOP;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('PRODUCTOS COMPRADOS');
    ELSE
        RAISE STOCK_SOBREPASADO;
    END IF;
    EXCEPTION
        WHEN STOCK_SOBREPASADO THEN
            DBMS_OUTPUT.PUT_LINE('EL STOCK FUE SOBREPASADO');
            ROLLBACK;
END;

COMMIT;
ROLLBACK;
SELECT * FROM PRODUCTO_AUX;

CALL COMPRAR(2,4);