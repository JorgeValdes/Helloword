drop table detalle;
drop table boleta;
drop table producto;
drop table categoria;
drop table cliente;

create table producto(
    codigo_producto number not null,
    nombre varchar2(20),
    precio number,
    codigo_categoria number,
    stock number    
);
/
create table categoria(
    codigo_categoria number not null,
    nombre_categoria varchar2(20)
);
/
create table detalle(
    codigo_producto number not null,
    codigo_boleta number not null,
    cantidad number,
    precio_unitario number,
    total number
);
/
create table cliente(
    rut number not null,
    nombre varchar2(30),
    apellidos varchar2(50),
    correo varchar2(50),
    edad number
);
/
create table boleta(
    codigo_boleta number not null,
    rut number,
    fecha date,
    total number
);

/
alter table categoria add constraint pk_categoria primary key(codigo_categoria);
alter table producto add constraint pk_productos primary key(codigo_producto);
alter table detalle add constraint pk_detalle primary key(codigo_producto, codigo_boleta);
alter table cliente add constraint pk_cliente primary key(rut);
alter table boleta add constraint pk_boleta primary key(codigo_boleta);

alter table producto add constraint fk_producto foreign key(codigo_categoria) references categoria(codigo_categoria);
alter table detalle add constraint fk_detalle_1 foreign key(codigo_producto) references producto(codigo_producto);
alter table detalle add constraint fk_detalle_2 foreign key(codigo_boleta) references boleta(codigo_boleta);
alter table boleta add constraint fk_boleta foreign key(rut) references cliente(rut);

/

INSERT INTO CATEGORIA VALUES(1,'PORTABLES');
INSERT INTO CATEGORIA VALUES(2,'TECNOLOGIA');
INSERT INTO CATEGORIA VALUES(3,'AUDIO');
INSERT INTO CATEGORIA VALUES(4,'MONITORES');
INSERT INTO CATEGORIA VALUES(5,'ACCESORIOS');
INSERT INTO CATEGORIA VALUES(6,'TABLETS');

INSERT INTO PRODUCTO VALUES (1,'NOTEBOOK LENOVO',380000,1,20);
INSERT INTO PRODUCTO VALUES (2,'CELULAR MOTOROLA',110000,2,15);
INSERT INTO PRODUCTO VALUES (3,'AUDIFONOS MACROTEL',3500,3,12);
INSERT INTO PRODUCTO VALUES (4,'NOTEBOOK SAMSUNG',500000,1,3);
INSERT INTO PRODUCTO VALUES (5,'MONITOR 17" AOC',67990,4,80);
INSERT INTO PRODUCTO VALUES (6,'MONITOR 21" DELL',81990,4,20);
INSERT INTO PRODUCTO VALUES (7,'NOTEBOOK HP',280990,1,1);
INSERT INTO PRODUCTO VALUES (8,'CELULAR IPHONE 6S',560000,2,6);
INSERT INTO PRODUCTO VALUES (9,'CELULAR LG',450000,2,7);
INSERT INTO PRODUCTO VALUES (10,'MOUSE BLUETOOTH',28990,5,9);
INSERT INTO PRODUCTO VALUES (11,'MONITOR 17" SAMSUNG',150000,4,7);
INSERT INTO PRODUCTO VALUES (12,'MONITOR 17" LENOVO',250000,4,7);
INSERT INTO PRODUCTO VALUES (13,'MONITOR 17" LG',125000,4,4);
INSERT INTO PRODUCTO VALUES (14,'MONITOR 15" LENOVO',200000,4,3);
INSERT INTO PRODUCTO VALUES (15,'MOTO G 2013',130000,2,45);
INSERT INTO PRODUCTO VALUES (16,'MOTO G 2015',180000,2,32);
INSERT INTO PRODUCTO VALUES (17,'MOTO X PLAY',370000,2,12);
INSERT INTO PRODUCTO VALUES (18,'IPAD MINI 2',200000,6,4);
INSERT INTO PRODUCTO VALUES (19,'IPAD AIR',260000,6,2);
INSERT INTO PRODUCTO VALUES (20,'NOTEBOOK MSI',850000,1,4);
INSERT INTO PRODUCTO VALUES (21,'MOUSE MICROSOFT',8500,5,5);

INSERT INTO CLIENTE VALUES (145375682,'Alejandro','Sepulveda','alesepulveda@hotmail.com',39);
INSERT INTO CLIENTE VALUES (204821232,'Francisca','Perez','fran__xdperez2000@gmail.com',18);
INSERT INTO CLIENTE VALUES (185756203,'Felipe','Tapia','ftapia46@gmail.com',25);
INSERT INTO CLIENTE VALUES (85762340,'Camila','Fernandez','cfernandez@ucm.cl',58);
INSERT INTO CLIENTE VALUES (183447872,'Javiera','Faundez','javi_faundez94@gmail.com',24);
INSERT INTO CLIENTE VALUES (175682842,'Carlos','Hernandez','carlos_herna91@gmail.com',28);

SET SERVEROUTPUT ON;


--EJERCICIO NUMERO MAYOR
CREATE OR REPLACE PROCEDURE MAYOR(
    NUMERO1 IN NUMBER,
    NUMERO2 IN NUMBER,
    RESULTADO OUT NUMBER
)
IS
BEGIN
    IF NUMERO1 > NUMERO2 THEN
        RESULTADO := NUMERO1;
    ELSE
        RESULTADO := NUMERO2;
    END IF;
END;

DECLARE
    RETORNO NUMBER;
BEGIN
    MAYOR(2,3,RETORNO);
    DBMS_OUTPUT.PUT_LINE('EL NUMERO MAYOR ES: '||RETORNO);
END;

--EJERCICIO PALABRA MINUSCULA A MAYUSCULA
CREATE OR REPLACE PROCEDURE MENOR_A_MAYOR(
    PALABRA IN OUT VARCHAR
)
IS
    --DEFINICIÓN DE VARIABLES
BEGIN
    PALABRA := UPPER(PALABRA);
END;

DECLARE
    PALABRA VARCHAR2(30);
BEGIN
    PALABRA := 'hola mundo';
    MENOR_A_MAYOR(PALABRA);
    DBMS_OUTPUT.PUT_LINE('PALABRA EN MAYUSCULA: '||PALABRA);
END;

--CANTIDAD DE CLIENTES
CREATE OR REPLACE PROCEDURE OBTENER_CANTIDAD_CLIENTES(
    CANTIDAD OUT NUMBER
)
IS
BEGIN
    SELECT COUNT(*) INTO CANTIDAD FROM CLIENTE;
END;

DECLARE
    CANTIDAD NUMBER;
BEGIN
    OBTENER_CANTIDAD_CLIENTES(CANTIDAD);
    DBMS_OUTPUT.PUT_LINE('LA CANTIDAD DE CLIENTES ES DE: '||CANTIDAD);
END;

--SUMA ENTRE NÚMEROS
CREATE OR REPLACE PROCEDURE SUMA_ENTRE_NUMEROS(
    NUMERO1 IN NUMBER,
    NUMERO2 IN NUMBER,
    SUMADOR OUT NUMBER
)
IS
BEGIN
    SUMADOR := 0;
    IF NUMERO1 < NUMERO2 THEN
        FOR I IN (NUMERO1+1)..(NUMERO2-1) LOOP
            SUMADOR := SUMADOR + I;
        END LOOP;
    ELSE
        FOR I IN (NUMERO2+1)..(NUMERO1-1) LOOP
            SUMADOR := SUMADOR + I;
        END LOOP;
    END IF;
END;

DECLARE
    SUMA NUMBER;
BEGIN
    SUMA_ENTRE_NUMEROS(1,7,SUMA);
    DBMS_OUTPUT.PUT_LINE('LA SUMA ENTRE LOS NÚMEROS INGRESADOS ES: '||SUMA);
END;

--RUT Y NOMBRE DEL CLIENTE QUE MÁS DINERO HA GASTADO COMPRANDO
CREATE OR REPLACE PROCEDURE DETERMINAR_ADINERADO(
    RUTC OUT BOLETA.RUT%TYPE,
    NOMBREC OUT CLIENTE.NOMBRE%TYPE,
    TOTALB OUT BOLETA.TOTAL%TYPE,
    RESULTADO OUT VARCHAR2
)
IS
BEGIN
    SELECT RUT, NOMBRE, TOTAL INTO RUTC, NOMBREC, TOTALB FROM 
    (SELECT C.RUT, C.NOMBRE, SUM(B.TOTAL) AS TOTAL
    FROM CLIENTE C JOIN BOLETA B
    ON C.RUT = B.RUT
    GROUP BY C.RUT, C.NOMBRE
    ORDER BY SUM(B.TOTAL) DESC)
    WHERE ROWNUM = 1;
    RESULTADO := 'TRUE';
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RESULTADO := 'FALSE';
END;

DECLARE
    RUT NUMBER;
    NOMBRE CLIENTE.NOMBRE%TYPE;
    TOTAL BOLETA.TOTAL%TYPE;
    RESULTADO VARCHAR2(100);
BEGIN
    DETERMINAR_ADINERADO(RUT,NOMBRE,TOTAL,RESULTADO);
    IF RESULTADO = 'TRUE' THEN
        DBMS_OUTPUT.PUT_LINE('EL CLIENTE CON MÁS COMPRAS REALIZADAS ES: '||RUT||' - '||NOMBRE||' - TOTAL: '||TOTAL);
    ELSE
        DBMS_OUTPUT.PUT_LINE('NO HAY COMPRAS REALIZADAS');
    END IF;
END;


--PROCEDIMIENTO PARA INGRESO DE UN PRODUCTO
CREATE OR REPLACE PROCEDURE INGRESAR_PRODUCTO(
    CODIGOP IN PRODUCTO.CODIGO_PRODUCTO%TYPE,
    NOMBREP IN PRODUCTO.NOMBRE%TYPE,
    PRECIOP IN PRODUCTO.PRECIO%TYPE,
    CODIGOC IN PRODUCTO.CODIGO_CATEGORIA%TYPE,
    STOCKP IN PRODUCTO.STOCK%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    CONTADOR_PRODUCTO NUMBER;
    CONTADOR_CATEGORIA NUMBER;
    PRODUCTO_EXISTE EXCEPTION;
    CATEGORIA_NO_EXISTE EXCEPTION;
    PRECIO_INCORRECTO EXCEPTION;
    STOCK_INCORRECTO EXCEPTION;
BEGIN
    IF PRECIOP > 0 THEN
        IF STOCKP > 0 THEN
            SELECT COUNT(*) INTO CONTADOR_CATEGORIA FROM CATEGORIA WHERE CODIGO_CATEGORIA = CODIGOC;
            IF CONTADOR_CATEGORIA > 0 THEN
                SELECT COUNT(*) INTO CONTADOR_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGOP;
                IF CONTADOR_PRODUCTO = 0 THEN
                    LOCK TABLE PRODUCTO IN ROW EXCLUSIVE MODE;
                    INSERT INTO PRODUCTO VALUES (CODIGOP, NOMBREP, PRECIOP, CODIGOC, STOCKP);
                    COMMIT;
                    RESULTADO := 'TRUE';
                    MENSAJE := 'EL PRODUCTO HA SIDO INGRESADO CON ÉXITO';
                ELSE
                    RAISE PRODUCTO_EXISTE;
                END IF;
            ELSE
                RAISE CATEGORIA_NO_EXISTE;
            END IF;
        ELSE
            RAISE STOCK_INCORRECTO;
        END IF;
    ELSE
        RAISE PRECIO_INCORRECTO;
    END IF;
    EXCEPTION 
        WHEN CATEGORIA_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'LA CATEGORIA INGRESADA NO EXISTE';
            ROLLBACK;
        WHEN PRODUCTO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'YA EXISTE UN PRODUCTO ASIGNADO CON EL CÓDIGO '||CODIGOP;
            ROLLBACK;
        WHEN PRECIO_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRECIO INGRESADO NO PUEDE SER CERO O NEGATIVO';
            ROLLBACK;
        WHEN STOCK_INCORRECTO THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL STOCK MINIMO DEL PRODUCTO DEBE SER 1';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'HA OCURRIDO UN ERROR NUEVO - CODIGO ERROR: '||SQLCODE;
            ROLLBACK;
END;

DECLARE
    RESULTADO VARCHAR2(5);
    MENSAJE VARCHAR2(100);
BEGIN
    --ES POSIBLE QUE LA EJECUCCIÓN GATILLE ERRORES NUEVOS, LOS ERRORES CAPTURADOS SON ERRORES COMUNES
    INGRESAR_PRODUCTO(1,'PANTALLA 21" SAMSUNG',250000,4,1,RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO PROCEDIMIENTO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: '||MENSAJE);
END;

--PROCEDIMIENTO PARA GENERAR UNA BOLETA
CREATE OR REPLACE PROCEDURE GENERAR_BOLETA(
    CODIGOB IN BOLETA.CODIGO_BOLETA%TYPE,
    RUTC IN BOLETA.RUT%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    CONTADOR_BOLETA NUMBER;
    CONTADOR_CLIENTE NUMBER;
    BOLETA_EXISTE EXCEPTION;
    CLIENTE_NO_EXISTE EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO CONTADOR_CLIENTE FROM CLIENTE WHERE RUT = RUTC;
    IF CONTADOR_CLIENTE > 0 THEN
        SELECT COUNT(*) INTO CONTADOR_BOLETA FROM BOLETA WHERE CODIGO_BOLETA = CODIGOB;
        IF CONTADOR_BOLETA = 0 THEN
            LOCK TABLE BOLETA IN ROW EXCLUSIVE MODE;
            INSERT INTO BOLETA VALUES(CODIGOB,RUTC,SYSDATE,0);
            COMMIT;
            RESULTADO := 'TRUE';
            MENSAJE := 'LA BOLETA HA SIDO GENERADA CON ÉXITO';
        ELSE
            RAISE BOLETA_EXISTE;
        END IF;
    ELSE
        RAISE CLIENTE_NO_EXISTE;
    END IF;
    EXCEPTION
        WHEN CLIENTE_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL CLIENTE INGRESADO NO EXISTE';
            ROLLBACK;
        WHEN BOLETA_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL CODIGO DE BOLETA INGRESADO YA ESTÁ ASOCIADO A OTRA BOLETA';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'HA OCURRIDO UN ERROR NUEVO - CODIGO ERROR: '||SQLCODE;
            ROLLBACK;
END;


DECLARE
    RESULTADO VARCHAR2(5);
    MENSAJE VARCHAR2(100);
BEGIN
    --ES POSIBLE QUE LA EJECUCCIÓN GATILLE ERRORES NUEVOS, LOS ERRORES CAPTURADOS SON ERRORES COMUNES
    GENERAR_BOLETA(1,185756203,RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO PROCEDIMIENTO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: '||MENSAJE);
END;

--VINCULAR PRODUCTO A BOLETA
CREATE OR REPLACE PROCEDURE VINCULAR_PRODUCTO_BOLETA(
    CODIGOB IN BOLETA.CODIGO_BOLETA%TYPE,
    CODIGOP IN PRODUCTO.CODIGO_PRODUCTO%TYPE,
    CANTIDAD IN NUMBER,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    CONTADOR_BOLETA NUMBER;
    CONTADOR_PRODUCTO NUMBER;
    STOCK_DISPONIBLE NUMBER;
    PRECIO_UNITARIO NUMBER;
    BOLETA_NO_EXISTE EXCEPTION;
    PRODUCTO_NO_EXISTE EXCEPTION;
    CANTIDAD_NEGATIVA EXCEPTION;
    CANTIDAD_SUPERIOR_STOCK EXCEPTION;
    SIN_STOCK EXCEPTION;
BEGIN
    IF CANTIDAD > 0 THEN
        SELECT COUNT(*) INTO CONTADOR_BOLETA FROM BOLETA WHERE CODIGO_BOLETA = CODIGOB;
        IF CONTADOR_BOLETA > 0 THEN
            SELECT COUNT(*) INTO CONTADOR_PRODUCTO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGOP;
            IF CONTADOR_PRODUCTO > 0 THEN
                SELECT STOCK INTO STOCK_DISPONIBLE FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGOP;
                IF STOCK_DISPONIBLE <= 0 THEN
                    RAISE SIN_STOCK;
                ELSE 
                    IF CANTIDAD <= STOCK_DISPONIBLE THEN
                        SELECT PRECIO INTO PRECIO_UNITARIO FROM PRODUCTO WHERE CODIGO_PRODUCTO = CODIGOP;
                        LOCK TABLE DETALLE IN ROW EXCLUSIVE MODE;
                        INSERT INTO DETALLE VALUES(CODIGOP,CODIGOB,CANTIDAD,PRECIO_UNITARIO,(PRECIO_UNITARIO*CANTIDAD));
                        RESULTADO := 'TRUE';
                        MENSAJE := 'PRODUCTO VINCULADO CON ÉXITO';
                        COMMIT;
                    ELSE
                        RAISE CANTIDAD_SUPERIOR_STOCK;
                    END IF;
                END IF;
            ELSE
                RAISE PRODUCTO_NO_EXISTE;
            END IF;
        ELSE
            RAISE BOLETA_NO_EXISTE;
        END IF;
    ELSE
        RAISE CANTIDAD_NEGATIVA;
    END IF;
    EXCEPTION
        WHEN CANTIDAD_NEGATIVA THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'LA CANTIDAD DEBE SER AL MENOS 1 UNIDAD';
            ROLLBACK;
        WHEN BOLETA_NO_EXISTE THEN 
            RESULTADO := 'FALSE';
            MENSAJE := 'EL CÓDIGO DE BOLETA -> '||CODIGOB|| ' <-- NO EXISTE';
            ROLLBACK;
        WHEN PRODUCTO_NO_EXISTE THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRODUCTO INGRESADO CON CÓDIGO: '||CODIGOP||' NO EXISTE';
            ROLLBACK;
        WHEN SIN_STOCK THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'EL PRODUCTO SELECCIONADO NO CUENTA CON STOCK';
            ROLLBACK;
        WHEN CANTIDAD_SUPERIOR_STOCK THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'LA CANTIDAD INGRESADA SUPERA EL STOCK DISPONIBLE';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'FALSE';
            MENSAJE := 'HA OCURRIDO UN ERROR NUEVO - CODIGO ERROR: '||SQLCODE;
            ROLLBACK;    
END;

DECLARE
    RESULTADO VARCHAR2(5);
    MENSAJE VARCHAR2(100);
BEGIN
    --ES POSIBLE QUE LA EJECUCCIÓN GATILLE ERRORES NUEVOS, LOS ERRORES CAPTURADOS SON ERRORES COMUNES
    VINCULAR_PRODUCTO_BOLETA(1,1,10,RESULTADO,MENSAJE);
    DBMS_OUTPUT.PUT_LINE('RESULTADO PROCEDIMIENTO: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('MENSAJE PROCEDIMIENTO: '||MENSAJE);
END;